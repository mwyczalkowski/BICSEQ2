#!/bin/bash

# Matthew Wyczalkowski <m.wyczalkowski@wustl.edu>
# Yige Wu <yigewu@wustl.edu>
# https://dinglab.wustl.edu/

# Create segmentation configuration file and detect CNVs based on the normalized data 
# generated by BICseq2-norm.  May use case-only or case and control mode.
# Usage:
#   bash run_segmentation.sh [options] 

# Options:
#   -v: verbose
#   -w: issue warnings instead of fatal errors if files do not exist
#   -d: dry run. Make segmentation configuration file but do not execute BICSeq-seg script
#   -S CASE_LIST: format: [case.chr1.norm.bin [case.chr2.norm.bin ...]]: required list of normalized bin file of the case genome as obtained from BICseq2-norm
#   -T CONTROL_LIST: [control.chr1.norm.bin [control.chr2.norm.bin ...]]: optional list of normalized bin file of the control genome as obtained from BICseq2-norm
#   -c CHRLIST: define chrom list, which will define CHR for each result.  List must be same length
#      as CASE_LIST and CONTROL_LIST
#   -C SEG_CONFIG: Use given segmentation config file, rather than creating it
#   -s CASE_NAME: Name for this case (patient)  Default: case
#   -o OUTD: set output directory.  Defalt is ./segmentation
# Parameters for NBICseq-norm.pl:
#   -l LAMBDA
#   -X XARGS: arguments to be passed directly to NBICseq-norm.pl

# * Input
#   * Reads per-chrom normalized data files
#   * Iterates over CASE_LIST
# * All output of this step written to $OUTD:
#   * segmentation configuration file {CASE_NAME}.seg-config.txt
#   * PNG output (CASE-seg.png)
#   * CNV file  (CASE.cnv)
#   * tmp directory $OUTD/tmp

SCRIPT=$(basename $0)

source /BICSEQ2/src/utils.sh
PERL="/usr/bin/perl"
BICSEQ_SEG="/NBICseq-seg_v0.7.2/NBICseq-seg.pl"

CASE_NAME="case"
OUTD="./segmentation"

# http://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":vwdS:T:c:C:s:o:X:l:" opt; do
  case $opt in
    v)  
      VERBOSE=1
      ;;
    w)  
      WARN=1
      ;;
    d)  
      DRYRUN=1
      ;;
    S) 
      CASE_LIST=($OPTARG)
      ;;
    T) 
      CONTROL_LIST=($OPTARG)
      ;;
    c) 
      CHRLIST=($OPTARG)
      ;;
    C) # define a segmentation configuration file instead of writing it
      SEG_CONFIG=$OPTARG
      >&2 echo Segmentation config file passed: $SEG_CONFIG
      ;;
    s) # Define CASE_NAME explicitly
      CASE_NAME=$OPTARG
      ;;
    o) 
      OUTD=$OPTARG
      ;;
    X) 
      XARGS="$OPTARG"
      ;;
    l) 
      LAMBDA=$OPTARG
      ;;
    \?)
      >&2 echo "$SCRIPT: ERROR: Invalid option: -$OPTARG"
      exit 1
      ;;
    :)
      >&2 echo "$SCRIPT: ERROR: Option -$OPTARG requires an argument."
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

function write_seg_config_case_only {
    SEG_CONFIG=$1
    # Create configuration file by iterating over all CHR associated with norm.bin results 
    # Alternatively, if CHRLIST is provided, use that rather that filename pattern matching
    # to recover CHR
    >&2 echo Writing case-only segmentation configuration $SEG_CONFIG
    printf "chromName\tbinFileNorm.Case\n" > $SEG_CONFIG
    for i in "${!CASE_LIST[@]}"; do
        CASE_RESULT="${CASE_LIST[i]}"
        if [ "$CHRLIST" ]; then
            CHR="${CHRLIST[i]}"
        else
            # assume result filename has form, XXX.CHR.norm.bin
            CHR=$(echo $(basename $CASE_RESULT) | cut -f 2 -d '.' )
        fi
        confirm $CASE_RESULT   
        printf "$CHR\t$CASE_RESULT\n" >> $SEG_CONFIG
    done
    >&2 echo Segmentation configuration $SEG_CONFIG written successfully
}

function write_seg_config_case_control {
    SEG_CONFIG=$1
    # Create configuration file by iterating over all CHR associated with norm.bin results 
    # Alternatively, if CHRLIST is provided, use that rather that filename pattern matching
    # to recover CHR
    >&2 echo Writing case / control segmentation configuration $SEG_CONFIG
    printf "chromName\tbinFileNorm.Case\tbinFileNorm.Control\n" > $SEG_CONFIG
    for i in "${!CASE_LIST[@]}"; do
        CASE_RESULT="${CASE_LIST[i]}"
        CONTROL_RESULT="${CONTROL_LIST[i]}"
        if [ ! -z $CHRLIST ]; then
            CHR="${CHRLIST[i]}"
        else
            CHR=$(echo $(basename $CASE_RESULT) | cut -f 2 -d '.' )
        fi
        confirm $CASE_RESULT   
        confirm $CONTROL_RESULT   
        printf "$CHR\t$CASE_RESULT\t$CONTROL_RESULT\n" >> $SEG_CONFIG
    done
    >&2 echo Segmentation configuration $SEG_CONFIG written successfully
}

# LAMBDA is a smoothing parameter
if [ ! $LAMBDA ]; then
    >&2 echo ERROR: parameter LAMBDA not defined
    exit 1
fi

# Check if control results exist, and if they do, that length is same as of case
# If CHRLIST is specified, make sure that length is same as case

# In general, we iterate over list of provided results (CASE_LIST) and extract chromosome name from it
# with the assumption that filename is sample_name.CHR.norm.bin. Alternatively, if CHRLIST is provided, we will
# obtain chromsome names from it; this requires that CASE_LIST and CHRLIST be the same lengths

if [ ! -z $CONTROL_LIST ]; then
    if [ ${#CASE_LIST[@]} != ${#CONTROL_LIST[@]} ]; then
        >&2 echo ERROR: Require CASE_LIST length to be same as CONTROL_LIST length
        >&2 echo CASE_LIST length = ${#CASE_LIST[@]}
        >&2 echo CONTROL_LIST length = ${#CONTROL_LIST[@]}
        exit 1
    fi
    >&2 echo Running case / control 
    XARGS="$XARGS --control"
    CASE_CONTROL=1
else
    >&2 echo Running case only
fi

if [ ! -z $CHRLIST ]; then
    if [ ${#CASE_LIST[@]} != ${#CHRLIST[@]} ]; then
        >&2 echo ERROR: Require CASE_LIST length to be same as CHRLIST length
        >&2 echo CASE_LIST length = ${#CASE_LIST[@]}
        >&2 echo CHRLIST length = ${#CHRLIST[@]}
        exit 1
    else
        >&2 echo Obtaining CHR from CHRLIST
    fi
else
    >&2 echo Obtaining CHR from CASE_LIST
fi

# Output, tmp, and log files go here

## create tmp directory
# be able to specify with -t
TMPD="$OUTD/tmp"
mkdir -p $TMPD

# Skip writing configutation file if it has already been defined with -C
if [ ! $SEG_CONFIG ]; then
    SEG_CONFIG="$OUTD/${CASE_NAME}.seg-config.txt"
    if [ $CASE_CONTROL ]; then
        write_seg_config_case_control $SEG_CONFIG
    else
        write_seg_config_case_only $SEG_CONFIG
    fi
else
    confirm $SEG_CONFIG
fi

PNG="$OUTD/${CASE_NAME}_seg.png"  # add to project_config
CNV="$OUTD/${CASE_NAME}.cnv"

CMD="$PERL $BICSEQ_SEG $XARGS --detail --noscale --lambda=$LAMBDA --tmp=$TMPD --fig $PNG $SEG_CONFIG $CNV"
run_cmd "$CMD" $DRYRUN

>&2 echo SUCCESS
